/**
 * @license
 * Copyright 2017 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Component, OnInit, Inject, OnDestroy} from '@angular/core';
import {ActivatedRoute, Router} from '@angular/router';

// import {IApisService} from '../../services/apis.service';

import {Connection} from '../../../models/connection';
// import {ArrayUtils} from '../../util/common';


const API_FILTERS_KEY = 'apicurio.studio.pages.apis.filters';


class Filters {
  nameFilter: string;
  sortDirection: string;
  layout: string;

  constructor(params?: any) {
    this.reset();
    if (params) {
      for (let key in params) {
        let value: string = params[key];
        this[key] = value;
      }
    }
  }

  public accepts(connection:Connection): boolean {
    let name: string = connection.name.toLocaleLowerCase();
    let namef: string = this.nameFilter.toLocaleLowerCase();
    return name.indexOf(namef) >= 0;
  }

  public reset(): void {
    this.nameFilter = '';
    this.sortDirection = 'ASC';
    this.layout = 'card';
  }
}

@Component({
  moduleId: module.id,
  selector: 'app-connections',
  templateUrl: './connections.component.htmlSAVE',
  styleUrls: ['./connections.component.css']
})
export class ConnectionsComponent implements OnDestroy {

  private allConnections: Connection[] = [];
  // private filteredConnections: Connection[];
  // private selectedConnections: Connection[];
  // private filters: Filters = new Filters();

  /**
   * C'tor.
   */
  constructor( ) {
    // this.filteredConnections = [];
    // this.selectedConnections = [];

    /*
    let fsaved: string = sessionStorage.getItem(API_FILTERS_KEY);
    if (fsaved) {
      this.filters = new Filters(JSON.parse(fsaved));
    }
    */
  }

  /**
   * Called to asynchronously load data needed by the page.
   */
  /*
  public loadAsyncPageData(): void {
    // console.log("[ApisPageComponent] loadAsyncPageData")
    this.connections.getConnections().then( connections => {
      this.allConnections = connections;
      this.filterApis();
      // this.loaded('connections');
    }).catch( error => {
      // console.error('[ApisPageComponent] Error fetching Connection list.');
      // this.error(error);
    });
  }
  */

  ngOnDestroy(): void {
    // sessionStorage.setItem(API_FILTERS_KEY, JSON.stringify(this.filters));
  }

  /**
   * Filters and sorts the list of apis based on the user's
   */
  /*
  private filterApis(): Connection[] {
    // Clear the array first.
    this.filteredConnections.splice(0, this.filteredConnections.length);
    for (let connection of this.allConnections) {
      if (this.filters.accepts(connection)) {
        this.filteredConnections.push(connection);
      }
    }
    this.filteredConnections.sort( (c1:Connection, c2:Connection) => {
      let rval: number = c1.name.localeCompare(c2.name);
      if (this.filters.sortDirection === 'DESC') {
        rval *= -1;
      }
      return rval;
    });

    // this.selectedConnections = ArrayUtils.intersect(this.selectedConnections, this.filteredConnections);

    return this.filteredConnections;
  }
  */

  /*
  public isFiltered(): boolean {
    return this.allConnections.length !== this.filteredConnections.length;
  }

  public toggleSortDirection(): void {
    if (this.filters.sortDirection === 'ASC') {
      this.filters.sortDirection = 'DESC';
    } else {
      this.filters.sortDirection = 'ASC';
    }
    this.filterApis();
  }

  public clearFilters(): void {
    this.filters.nameFilter = '';
    this.filterApis();
  }

*/
 
  /*
  public onSelected(connection: Connection): void {
    // console.info("[ApisPageComponent] Caught the onApiSelected event!  Data: %o", connection);
    this.selectedConnections.push(connection);
  }

  public onDeselected(connection: Connection): void {
    // console.info("[ApisPageComponent] Caught the onApiDeselected event!  Data: %o", connection);
    this.selectedConnections.splice(this.selectedConnections.indexOf(connection), 1);
  }
  */

  /**
   * Called to delete all selected APIs.
   */
//  public deleteApis(): void {
    // TODO deleting the APIs is done asynchronously - we need some sort of visual status (spinner) to watch progress, and then close the dialog when it's done

    // Note: we can only delete selected items that we can see in the UI.
//    let itemsToDelete: Api[] = ArrayUtils.intersect(this.selectedConnections, this.filteredConnections);
//    console.log("[ApisPageComponent] Deleting %s selected APIs.", itemsToDelete.length);
//    for (let connection of itemsToDelete) {
//      this.connections.deleteConnection(connection).then( () => {
//        this.removeConnectionFromList(connection);//       this.filterConnections();
      }).catch( error => {
        console.error('[ApisPageComponent] Error deleting an API with ID %s', connection.id);
        // this.error(error);
      });
    }
    this.selectedConnections = [];
  }
  
  public onListLayout(): void {
    this.filters.layout = 'list';
  }

  public onCardLayout(): void {
    this.filters.layout = 'card';
  }

  public onReset(): void {
    this.filters.reset();
  }

  private removeConnectionFromList(connection: Connection) {
    this.allConnections.splice(this.allConnections.indexOf(connection), 1);
  }
}
